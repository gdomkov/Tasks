import argparse
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation

ON = 255
OFF = 0


def update(frameNum, img, grid, gridsize):
    newgrid = grid.copy()
    for i in range(gridsize):
        for j in range(gridsize):
            total = int((grid[i, (j - 1) % gridsize] + grid[i, (j + 1) % gridsize] +
                         grid[(i - 1) % gridsize, j] + grid[(i + 1) % gridsize, j] +
                         grid[(i - 1) % gridsize, (j - 1) % gridsize] +
                         grid[(i - 1) % gridsize, (j + 1) % gridsize] +
                         grid[(i + 1) % gridsize, (j - 1) % gridsize] + grid[
                         (i + 1) % gridsize, (j + 1) % gridsize]) / 255)

            if grid[i, j] == ON:
                if (total < 2) or (total > 3):
                    newgrid[i, j] = OFF
            else:
                if total == 3:
                    newgrid[i, j] = ON

    grid[:] = newgrid[:]
    img.set_data(newgrid)
    return img,


def add_glider(i, j, grid):

    glider = np.array([[0,    0, 255],
                       [255,  0, 255],
                       [0,  255, 255]])

    grid[i:i+3, j:j+3] = glider


def main():
    parser = argparse.ArgumentParser(description="Conway's game of life in Python 3")
    parser.add_argument('gridsize', type=int, help='Dimension of grid.')
    parser.add_argument('interval', type=int, help='Interval.')
    parser.add_argument('formationflag', type=bool, help='Predefined formation.')
    parser.add_argument('frame', type=int, help='How many frames to animate.')


    arguments = parser.parse_args()
    frame = int(arguments.frame)
    gridsize = int(arguments.gridsize)
    interval = int(arguments.interval)
    formation = arguments.formationflag

    if formation:
        grid = np.zeros(gridsize*gridsize).reshape(gridsize, gridsize)
        add_glider(1, 1, grid)
    else:
        grid = randomgrid(gridsize)

    fig, ax = plt.subplots()

    img = ax.imshow(grid, cmap='binary', interpolation='nearest')

    ani = animation.FuncAnimation(fig, update, fargs=(img, grid, gridsize,),
                                  frames=frame,
                                  interval=interval,
                                  save_count=50)

    ax.axes.xaxis.set_ticklabels([])
    ax.axes.yaxis.set_ticklabels([])
    plt.xticks([])
    plt.yticks([])

    plt.show()

if __name__ == '__main__':
    main()
    print("DONE")

if __name__ == '__main__':
    new_game()
